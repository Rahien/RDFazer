#+TITLE:RDFazer

* Introduction
RDFazer is a chrome browser plugin for tagging a website with RDFa concepts. It only tags the static page and does not store the content anywhere. It was concieved for taking an existing (static) webpage and tagging it with concepts from some taxonomy (e.g. the EC ESCO taxonomy). This page can then be stored elsewhere.

This code was written based on the nice input from:
- the tutorial provided by google :: e.g. https://developer.chrome.com/extensions/getstarted
- stackoverflow :: e.g. http://stackoverflow.com/questions/11684454/getting-the-source-html-of-the-current-page-from-chrome-extension

This code makes heavy use of the [[https://github.com/timdown/rangy][rangy]] library, jquery and jquery ui.

RDFazer is currently a WIP and should not be used at all.
* Manifest file
Chrome browser extensions require a json manifest file, dealing with permissions and setup of the extension. This is the file used for RDFazer:

#+BEGIN_SRC js :tangle manifest.json
  {
    "name": "RDFazer",
    "version": "0.1",
    "manifest_version": 2,
    "description": "Tag concepts on a page with RDFa",
    "browser_action": {
        "default_icon": "icon.png"
    },
      "content_scripts": [
          {
              "matches": ["http://*/*", "https://*/*"],
              "css": ["contentscript.css","lib/jquery-ui.css"],
              "js": ["lib/jquery-2.0.3.min.js","lib/jquery-ui-1.10.4.custom.min.js","lib/jquery.migrate.min.js","utils.js","backendApi.js","contentscript.js", "lib/rangy-core.js", "lib/rangy-classapplier.js","lib/rangy-highlighter.js"]
          }
      ],
      "background": {
          "scripts":["lib/jquery-2.0.3.min.js","background.js","utils.js"]
      },
      "permissions": ["tabs", "<all_urls>"],
      "web_accessible_resources": ["lib/jquery-2.0.3.min.map","lib/jquery-2.0.3.js","contentscript.css","interface.html","dialog.html"]
  }
#+END_SRC
* Background

There also is some code included on the background side of the extension. This is mostly to intercept the click of the button. This will send a message to the injected script on the web page to initiate the user interface. After that, it will exchange messages with the injected script and the back-end.

#+BEGIN_SRC js :tangle background.js
  function sendMessage (messagePayload, messageHandler){
      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
          chrome.tabs.sendMessage(tabs[0].id, messagePayload, messageHandler);
      });
  }

  chrome.browserAction.onClicked.addListener(function(activeTab) {
      sendMessage({type:"initRDFazer"},function(response){
          console.log("RDFazer initialized");
      });
  });
  
  chrome.runtime.onMessage.addListener(
      function(request, sender, sendResponse) {
  
      }
  );  
#+END_SRC
* Utility Scripts
The scripts here will be included in both the backend and contentscript side. They provide some helpful library functions.

#+BEGIN_SRC js :tangle utils.js
  
#+END_SRC
* contentscript side
** interacting with the dom tree
To fetch information from the running browser page, we need to inject the following javascript to the browser.

#+BEGIN_SRC js :tangle contentscript.js
  function sendMessage (messagePayload, messageHandler){
      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
          chrome.tabs.sendMessage(tabs[0].id, messagePayload, messageHandler);
      });
  }
  function handleServerError(request,status,error,stage){
      var message = "An error occurred during " + stage+".\n"+
          "The server responded with status code '"+status+"' and the error message was:\n'"+error+"'";
      rdfazerMessage(message,"bad-message");
  }
  
  function rdfazerMessage(message,classes){
      var body=document.getElementsByTagName("body");
      var messageDiv=document.createElement("div");
      $(messageDiv).addClass(classes+" rdfazerMessage").text(message);
      setTimeout(function(){
          $(messageDiv).addClass(classes+" rdfazerMessage-close")       
          setTimeout(function(){$(messageDiv).remove()},3000);
      },1500);
      $(body[0]).append(messageDiv);
      setTimeout(function(){
          $(messageDiv).addClass("rdfazerMessage-open");
      },0);
  }
  
  var Rdfazer = {
      currentRange:null, 
      baseURI:"http://localhost",
      //* stores the current HTML page in the rdfazer component for storing it as a source when needed. TODO use and store the HTML
      storeCurrentHTML: function() {
          this.currentHTML = document.getElementsByTagName("html")[0].outerHTML;
      },
      
      init: function(){
          var rdfazerIF = $("#rdfazerInterface")[0];
          if(rdfazerIF){
              return rdfazerIF;
          }else{
              rangy.init();
  
              this.addCss();
              this.addInterface();
          }
      },
      addInterface: function(){
          var self=this;
          $("body").append("<div id='rdfazerInterface'></div>");
          $('#rdfazerInterface').load(chrome.extension.getURL("interface.html"),function(){
              var rdfazer= $("#rdfazerInterface");
              $(".rdfazerhead button.switch").click(function(){
                  rdfazer.toggleClass("left");
              });
              $(".rdfazerhead button.open").click(function(){
                  rdfazer.toggleClass("open");
              });
              $(".rdfazerhead button.remove").click(function(){
                  self.destroy();
              });
              self.addDialog();
              self.showHighlights();
          });
      },
  
      destroy:function(){
          $('#rdfazerInterface').remove();
          $('#rdfazerdialog').dialog('destroy').remove();
      },
  
      addHighlightToSelection:function(name,url,uris){
          var highlighter = rangy.createHighlighter();
          var localHighlightUri = "_:rdfazer"+(new Date()).getTime();
  
          highlighter.addClassApplier(rangy.createCssClassApplier("highlight", {
              ignoreWhiteSpace: true,
              elementTagName: "a",
              elementProperties: {
                  href: url,
                  onclick: function() {
                      var highlight = highlighter.getHighlightForElement(this);
                      if (window.confirm("Delete this highlight (URL " + url + ")?")) {
                          highlighter.removeHighlights( [highlight] );
                      }
                      return false;
                  }
              },
              elementAttributes: {
                  about: localHighlightUri,
                  title: name
              }
          }));
  
          highlighter.highlightRanges("highlight",[this.currentRange]);
  
          this.addHighlightedConcept(localHighlightUri,uris);
      },
  
      addHighlightedConcept:function(localHighlightUri,uris){
          var conceptsDiv = $("#rdfazerconcepts");
          if(conceptsDiv.length==0){
              $("body").append("<div id='rdfazerconcepts' style='display:none'></div>");
              conceptsDiv = $("#rdfazerconcepts");
          }
  
          conceptsDiv.append("<div about='"+localHighlightUri+"'><div rel='"+this.baseURI+"/highlightFor'></div></div>");
          
          var relation = $("#rdfazerconcepts div[rel='"+this.baseURI+"/highlightFor']");
  
          for(var i=0, uri; uri=uris[i]; i++){
              relation.append("<span about='"+uri+"'></span>");
          }
  
          this.showHighlights();
      },
  
      readAndAddHighlight:function(){
          var name = $("#rdfazerdialog input[name='label']").val();
          var url = $("#rdfazerdialog input[name='href']").val();
          var uriInputs = $("#rdfazerdialog input.uri");
          var uris = [];
          for(var i=0,uri;uri=uriInputs[i]; i++){
              uris.push($(uri).val());
          }
          
          this.addHighlightToSelection(name,url,uris);
      },
  
      addDialog:function(){
          var self=this;
          $("body").append("<div id='rdfazerdialog' title='Add new highlight'></div>");
          $('#rdfazerdialog').load(chrome.extension.getURL("dialog.html"),function(){
              var dialog = $( "#rdfazerdialog" ).dialog({
                  autoOpen: false,
                  height: 320,
                  width: 450,
                  modal: true,
                  buttons: {
                      "highlight": function(){
                          self.readAndAddHighlight();
                          dialog.dialog( "close" );
                      },
                      Cancel: function() {
                          dialog.dialog( "close" );
                      }
                  },
                  close: function() {
                      var uriInputs = $("#rdfazerdialog input.uri");
                      for(var i=1, uri; uri=uriInputs[i];i++){
                          $(uri).remove();
                      }
                  }
              });
              
              $(".rdfazerhead button.highlight").click(function(){
                  self.currentRange = rangy.getSelection().getRangeAt(0);
                  dialog.dialog( "open" );
              });
  
              $("#rdfazerdialog button.adduri").click(function(){
                  $("#rdfazerdialog .uris").append('<input type="text" value="http://localhost/show-concept/1" class="uri text ui-widget-content ui-corner-all">');
              });
              $("#rdfazerdialog button.removeuri").click(function(){
                  $("#rdfazerdialog .uris").children().last().remove();
              });
          });
      },
  
      addCss:function(){
          var link = document.createElement("link");
          link.href = chrome.extension.getURL("contentscript.css");
          link.type = "text/css";
          link.rel = "stylesheet";
          document.getElementsByTagName("head")[0].appendChild(link);
      },
      
      showHighlights:function(){
          var content = $("#rdfazerInterface .rdfazercontent");
          content.empty();
          
          var highlights = $(".highlight[about]");
          
          for(var i=0, highlight; highlight=highlights[i]; i++){
              var node = $(highlight);
              var highlightURI = node.attr("about");
              var urinodes = $("#rdfazerconcepts div[about='"+highlightURI+"'] span");
              var uris = [];
              for(var j=0, uri; uri=urinodes[j]; j++){
                  uris.push($(uri).attr("about"));
              }
              var offset = node.offset();
              var tag=$("<a class='highlightTag' highlight= '"+highlightURI+"' href='"+node.attr("href")+"'>"+uris.join(", ")+"</div>");
              tag.css({ top: offset.top+"px" });
  
              tag.hover(function(){
                  var highlightURI=$(this).attr("highlight");
                  $(".highlight[about='"+highlightURI+"']").addClass("hover");
              },function(){
                  var highlightURI=$(this).attr("highlight");
                  $(".highlight[about='"+highlightURI+"']").removeClass("hover");
              });
  
              content.append(tag);
          }
  
      }
  };
  
  chrome.runtime.onMessage.addListener(
      function(request, sender, sendResponse) {
          if(request.type == "initRDFazer"){
              Rdfazer.init();
              sendResponse({status:"ok"});
          } else if(request.type == "getPageContent"){
              var htmlNodes = document.getElementsByTagName("html");
              sendResponse({html:htmlNodes[0].outerHTML});
          }
    });
  
#+END_SRC
** Backend api
The following calls interact with the backend api to fetch and store information in the backend. The backend api can be included on the contentscript side as scripts there are allowed to do cross-origin requests.

#+BEGIN_SRC js :tangle backendApi.js
  
#+END_SRC
* style
There is also css injected into the web page:

#+BEGIN_SRC css :tangle contentscript.css
  div#rdfazerInterface {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
      background: white;
      border: solid black 2px;
      z-index: 9999;
      border-width: 0 0 0 2px;
      overflow:hidden;
  }
  .ui-front {
      z-index:10000;
  }
  div#rdfazerInterface.left {
      top: 0;
      left: 0;
      right: auto;
      border-width: 0 2px 0 0;
  }
  .rdfazerhead {
      position:fixed;
  }
  .rdfazerhead button {
      position: absolute;
      top: 1em;
      right: 1em;
  }
  
  .rdfazerhead h1 {
      position: relative;
      /* Safari */ -webkit-transform: rotate(-90deg);  /* Firefox */ -moz-transform: rotate(-90deg);  /* IE */ -ms-transform: rotate(-90deg);  /* Opera */ -o-transform: rotate(-90deg);  /* Internet Explorer */ filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
      margin: 0;
      padding: 0;
      display: inline-block;
      top: 215px;
      left: -35px;
      font-style: italic;
  }
  .rdfazerhead {
      float: left;
      width: 4em;
      height: 100%;
  }
  .rdfazerhead button {
      position: relative;
      right: auto;
      height: 2em;
      width: 2em;
      left: 14px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      background-color: lightgray;
      border-radius: 40px;
      border: solid 0px gray;
      outline: none;
      top:-2.5em;
      margin: 0.3em 0em;
  }
  .rdfazerhead button.switch {
      background-color:lightyellow;
  }
  .rdfazerhead button.remove {
      background-color:pink;
  }
  .rdfazerhead button.highlight {
      background-color:lightblue;
  }
  .rdfazerhead button.open {
      background-color:lightgreen;
  }
  .rdfazercontent {
      margin-left: 4em;
      width: 0px;
      height: 100%;
      overflow: hidden;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      padding: 0 !important;
      border: dashed 0px lightgray;
      border-width: 0 0 0 1px;
      position:relative;
  }
    
  .left .rdfazercontent {
      border-width: 0 1px 0 0;
  }
  .open .rdfazercontent {
      width:350px;
      padding: 0 0.3em !important;
  }
  .open.left .rdfazerhead {
      left:345px;
  }
  .left .rdfazercontent {
      margin-left: 0;
      margin-right: 4em;
  }
  #rdfazerdialog input.text.ui-widget-content.ui-corner-all {
      width: 100%;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
  }
  body {
      position:relative;
  }
  .left.open .rdfazerhead h1 {
      left: -28px;
  }
  .left.open .rdfazerhead button {
      left: 20px;
  }
  .highlightTag {
      background-color: lightblue;
      padding: 0 0.3em;
      border: solid 1px lightseagreen;
      border-radius: 5px;
      margin-right: 0.3em;
      display: inline-block;
      position: absolute;
  }
  .highlight.hover {
      background-color: lightblue;
      padding: 0 0.3em;
      border: solid 1px lightseagreen;
      border-radius: 5px;
  }
#+END_SRC
